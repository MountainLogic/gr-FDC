<?xml version="1.0"?>
<block>
  <name>Frequency Domain Channelizer</name>
  <key>FDC_FrequencyDomainChannelizer</key>
  <category>[FDC]</category>
  <import>import FDC</import>
  <make>FDC.FrequencyDomainChannelizer($type.size, $blocksize, $relinvovl, $throughput_channels, $activity_controlled_channels, $act_contr_threshold, $fs, $centerfrequency, $freqmode, $windowtype, $msgoutput, $fileoutput, $outputpath, $threaded, $activity_detection_segments, $act_det_threshold, $minchandist, $act_det_deactivation_delay, $minchanflankpuffer, $verbose, $pow_act_deactivation_delay, $pow_act_maxblocks, $act_det_maxblocks, $debug)</make>
  

  <param_tab_order>
    <tab>General</tab>
    <tab>Throughput</tab>
    <tab>FixedCarrier</tab>
    <tab>Detection</tab>
  </param_tab_order>


<!-- ###General### -->

<param>
		<name>IO Type</name>
		<key>type</key>
		<type>enum</type>
		<option>
			<name>Complex</name>
			<key>complex</key>
			<opt>size:gr.sizeof_gr_complex</opt>
		</option>
		<option>
			<name>Float</name>
			<key>float</key>
			<opt>size:gr.sizeof_float</opt>
		</option>
		<tab>General</tab>
	</param>
	
	
  <param>
    <name>Blocklen</name>
    <key>blocksize</key>
    <value>2**12</value>
    <type>int</type>
    <tab>General</tab>
  </param>
  <param>
    <name>Relative inverse overlap</name>
    <key>relinvovl</key>
    <value>4</value>
    <type>int</type>
    <tab>General</tab>
  </param>
  
  
  <param>
		<name>Threaded</name>
		<key>threaded</key>
		<type>enum</type>
		<option>
			<name>Yes</name>
			<key>1</key>
		</option>
		<option>
			<name>No</name>
			<key>0</key>
		</option>
	</param>
  
  
<!-- signal parameter.... variable -->
<param>
		<name>Frequency mode</name>
		<key>freqmode</key>
		<type>enum</type>
		<option>
			<name>Normalized baseband</name>
			<key>0</key>
		</option>
		<option>
			<name>Baseband + sample rate</name>
			<key>1</key>
		</option>
		<option>
			<name>Centerfreq + sample rate</name>
			<key>2</key>
		</option>
		<tab>General</tab>
	</param>

	<param>
    <name>Samprate</name>
    <key>fs</key>
    <value>samp_rate</value>
    <type>float</type>
    <tab>General</tab>
  </param>
  
  <param>
    <name>Base frequency</name>
    <key>centerfrequency</key>
    <value>3e6</value>
    <type>float</type>
    <tab>General</tab>
  </param>
  
  <param>
		<name>Debug Output</name>
		<key>debug</key>
		<type>enum</type>
		<option>
			<name>Yes</name>
			<key>1</key>
			<opt>hide:0</opt>
		</option>
		<option>
			<name>No</name>
			<key>0</key>
			<opt>hide:1</opt>
		</option>
		<tab>General</tab>
	</param>
  
  
  
  
  <param>
		<name>Message Output</name>
		<key>msgoutput</key>
		<type>enum</type>
		<option>
			<name>Yes</name>
			<key>1</key>
		</option>
		<option>
			<name>No</name>
			<key>0</key>
		</option>
		<tab>General</tab>
	</param>
	
	<param>
		<name>File Output</name>
		<key>fileoutput</key>
		<type>enum</type>
		<option>
			<name>Yes</name>
			<key>1</key>
		</option>
		<option>
			<name>No</name>
			<key>0</key>
		</option>
		<tab>General</tab>
	</param>
	
	<param>
	<name>Output path</name>
	<key>outputpath</key>
	<value>/home/user/...</value>
	<type>string</type>
	<tab>General</tab>
	</param>
  
  
  
  <param>
		<name>Log/verbose destination</name>
		<key>verbose</key>
		<type>enum</type>
		<option>
			<name>None</name>
			<key>0</key>
		</option>
		<option>
			<name>Print to console</name>
			<key>1</key>
		</option>
		<option>
			<name>Log to file</name>
			<key>2</key>
		</option>
	</param>
	
	
	
  
  
  
  
  <!-- ###Throughput channels### -->
  <param>
		<name>Window</name>
		<key>windowtype</key>
		<type>enum</type>
		<option>
			<name>Rectangular</name>
			<key>0</key>
		</option>
		<option>
			<name>HANN</name>
			<key>1</key>
		</option>
		<option>
			<name>Ramp</name>
			<key>2</key>
		</option>
		<tab>Throughput</tab>
	</param>
	
	<param>
	<name>Channels</name>
	<key>throughput_channels</key>
	<value>[ [0.2, 0.05], [0.4,0.05], [0.6,0.05] ]</value>
	<type>raw</type>
	<tab>Throughput</tab>
	</param>
	
	
	
	
	
	<!-- ###Activity controlled### -->
  
	<param>
	<name>Channels</name>
	<key>activity_controlled_channels</key>
	<value>[ [0.2, 0.05], [0.4,0.05], [0.6,0.05] ]</value>
	<type>raw</type>
	<tab>FixedCarrier</tab>
	</param>
	
	<param>
	<name>Power Threshold[dB]</name>
	<key>act_contr_threshold</key>
	<value>6</value>
	<type>float</type>
	<tab>FixedCarrier</tab>
	</param>
	
	
	<param>
    <name>Deactivation delay</name>
    <key>pow_act_deactivation_delay</key>
    <value>1</value>
    <type>int</type>
    <tab>FixedCarrier</tab>
  </param>
	
	<param>
    <name>Max active blocks</name>
    <key>pow_act_maxblocks</key>
    <value>128</value>
    <type>int</type>
    <tab>FixedCarrier</tab>
  </param>
  
	
  
  
  <!--###Activity detection###-->
  
  <param>
	<name>Segments</name>
	<key>activity_detection_segments</key>
	<value>[ [0.1, 0.2], [0.7, 0.9], ]</value>
	<type>raw</type>
	<tab>Detection</tab>
	</param>
	
	<param>
	<name>Power Threshold[dB]</name>
	<key>act_det_threshold</key>
	<value>10</value>
	<type>float</type>
	<tab>Detection</tab>
	</param>

  <param>
    <name>Minimum channel distance</name>
    <key>minchandist</key>
    <value>0.005</value>
    <type>float</type>
    <tab>Detection</tab>
  </param>
  
  <param>
    <name>Min channel flank puffer</name>
    <key>minchanflankpuffer</key>
    <value>0.2</value>
    <type>float</type>
    <tab>Detection</tab>
  </param>
  
  <param>
    <name>Deactivation delay</name>
    <key>act_det_deactivation_delay</key>
    <value>1</value>
    <type>int</type>
    <tab>Detection</tab>
  </param>
  
  <param>
    <name>Max active blocks</name>
    <key>act_det_maxblocks</key>
    <value>128</value>
    <type>int</type>
    <tab>Detection</tab>
  </param>
  
  
  
  
  
  
  
  
  <sink>
    <name>in</name>
    <type>$type</type>
  </sink>


  
  
  
  <source>
	<name>debug</name>
	<type>complex</type>
	<vlen>$blocksize</vlen>
	<optional>1</optional>
	<hide>$debug.hide</hide>
  </source>
  
  <source>
    <name>throughput_out</name>
    <type>complex</type>
    <nports>len($throughput_channels)</nports>
    <optional>1</optional>
    <!-- <hide>len($throughput_channels)==0</hide> -->
  </source>
  
  <source>
	<name>msgout</name>
	<type>message</type>
	<optional>1</optional>
  </source>
  
  
  
  
  
  
  <doc>
##PowerActivationChannelizer##

Author and Copyright holder: Gereon Such, gereonsuch@gmail.com

This is a hier block implementing a complete channelizer system for frequency/time domain/demand assigned multiple access multicarrier systems

This block implements blockwise overlapping, frequency transofmration and three different channelization methods to suite to different applications

#General information#

 * IO Type is the input type, choose complex or float accordingly. 
 
 * Input is a complex or float stream
 * Output is message or file based or streams for constant output channels without carrier detection
 
 * Blocklen is the used vector length. It must be a power of 2 or will be adjusted accordingly. Small block lengths may lead to insufficient carrier detection due to high noise impact, great block lengths may lead to malfunctioning burst detection if blocklength exceeds the number of samples between bursts
 * Rel. inverse Overlap is the inverse of the used overlap in the input vector. It must be a power of 2, typically 4 is chosen, but not necessarily. 
 * Threaded determines if subblocks should thread themselves. I don't see why this should be disabled at all but feel free to do so. 
 * Frequency mode determines how input frequencies to this block are interpreted.
    * Normalized baseband accepts frequencies in range [0.0:1.0], according to samprate
    * Baseband + sample rate interprets inputs from [0.0:samp_rate]. Carrierfrequency is interpreted as 0
    * Centerfreq + sample rate interprets frequencies as the absolute frequency it was received at. 
 * Samprate is the sample rate. For Normalized baseband frequency mode, it is not used. 
 * Basefrequency determines the (hardware) carrierfrequency. It is only used in Centerfreq + sample frequency mode. 
 
 * Message output determines if the channel data should be emitted via Gnuradio message passing
 * File output determines if the channel data should be emitted as a file
 * Outputfiles is the path to store the channel data if File output is true
 * Log/verbose destination specifies if and how the activity should be logged.
    * None means no logging at all, choose this for maximum runtime efficiency. 
    * Print to console prints all gathered information to console. with many concurrent channelizers, this might mean a lot of messages.
    * Log to file logs the complete output to a file in your home dir or from whereever you instantiated the top_block
 

#Throughput channelizer#

For each specified channel in this channelizer, a constant stream output is created. 

If no throughput channelizer is used, a stream output is displayed in GRC, but without any "harm". In this case, you don't need to connect it. (nports option of GRC seems to ignore the 0)

 * Window specifies the used window. HANN window should suffice in most cases. 
 * Channels accepts a list of 2 element-lists of floats, where the first element is the mid frequency according to frequency mode, the second element is the output minimum bandwidth. The actual output bandwidth is always greater than the desired bandwidth, since it needs to be a power of 2 according to blocklen. 
   An example is [ [midfreq1, chanbw1], [midfreq2, chanbw2], ... ]


#Fixed Carrier power activation#

For each specified channel a channelizer with power detection is implemented. It activates and deactivates according to input power and emits the received data according to output modes. 

 * Channels accepts a list of 2 element-lists of floats, where the first element is the mid frequency according to frequency mode, the second element is the output minimum bandwidth. The actual output bandwidth is always greater than the desired bandwidth, since it needs to be a power of 2 according to blocklen. 
   An example is [ [midfreq1, chanbw1], [midfreq2, chanbw2], ... ]
 * Power Threshold[dB] is the minimum power difference in dB in consecutive blocks to activate and deactivate the channel. 
 * Deactivation delay is currently not implemented. Feel free to enter whatever you like ;)
 * Max active blocks smaller 0 leads to only emit messages if the channel end is detected. Equal 0, every block is emitted, greater 0, the according size of blocks is determined as a maximum puffered blocknumber and the data to that point is emitted with according flags.   
 

#Detection mode#

For each specified segment a channelizer with power detection is implemented. In the specified range, it detects carriers, adjusts the extraction bandwidth and emits them on closure. 

 * Segments accepts a list of 2 element-lists of floats, where the first element is the startingand the second element is the stop frequency according to frequency mode. In this range, the carriers are detected accordingly. 
   An example is [ [seg1start, seg1stop], [seg2start, seg2stop], ... ]
 * Power Threshold[dB] is the power of an edge of a carrier that needs to be exceeded to be recognized. Choose this carefully as it might lead to failed carrier recognition. 
 * Minimum channel distance leads to a factor for averaging of the power in the segment to reduce complexity in carrier detection and reduce noise peaks. 
 * Min channel flank puffer is the one sided puffer relative to the detected bandwidth of a signal that is added to avoid filter flanks in signal edges.
 
 * Deactivation delay is the number of consecutive blocks without activity it takes to turn off a channel
 * Max active blocks smaller 0 leads to only emit messages if the channel end is detected. Equal 0, every block is emitted, greater 0, the according size of blocks is determined as a maximum puffered blocknumber and the data to that point is emitted with according flags.   
 
If you have any trouble, let me know or feel free to contribute @ github.com/gereonsuch/gr-FDC
</doc>
  
  
</block>
